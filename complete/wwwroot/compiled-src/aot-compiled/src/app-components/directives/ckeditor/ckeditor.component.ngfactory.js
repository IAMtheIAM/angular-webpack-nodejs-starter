/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = require('../../../../../src/app-components/directives/ckeditor/ckeditor.component');
var import1 = require('@angular/core/src/change_detection/change_detection');
var import2 = require('@angular/core/src/linker/view_utils');
var import3 = require('@angular/core/src/linker/view');
var import4 = require('@angular/core/src/linker/debug_context');
var import6 = require('@angular/core/src/linker/element');
var import8 = require('@angular/core/src/linker/view_type');
var import9 = require('@angular/core/src/metadata/view');
var import10 = require('@angular/core/src/linker/component_factory');
var Wrapper_CKEditor = (function () {
    function Wrapper_CKEditor() {
        this.changed = false;
        this.context = new import0.CKEditor();
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_CKEditor.prototype.check_ckEditorInstanceID = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this.changed = true;
            this.context.ckEditorInstanceID = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_CKEditor.prototype.detectChangesInInputProps = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_CKEditor.prototype.detectChangesInHostProps = function (view, el, throwOnChange) {
    };
    return Wrapper_CKEditor;
}());
exports.Wrapper_CKEditor = Wrapper_CKEditor;
var nodeDebugInfos_CKEditor_Host0 = [new import4.StaticNodeDebugInfo([import0.CKEditor], import0.CKEditor, {})];
var renderType_CKEditor_Host = null;
var _View_CKEditor_Host0 = (function (_super) {
    __extends(_View_CKEditor_Host0, _super);
    function _View_CKEditor_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CKEditor_Host0, renderType_CKEditor_Host, import8.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways, nodeDebugInfos_CKEditor_Host0);
    }
    _View_CKEditor_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer, 'ckeditor', import2.EMPTY_INLINE_ARRAY, rootSelector, this.debug(0, 0, 0));
        this._appEl_0 = new import6.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_CKEditor0(this.viewUtils, this.injector(0), this._appEl_0);
        this._CKEditor_0_4 = new Wrapper_CKEditor();
        this._appEl_0.initComponent(this._CKEditor_0_4.context, [], compView_0);
        compView_0.create(this._CKEditor_0_4.context, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_CKEditor_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.CKEditor) && (0 === requestNodeIndex))) {
            return this._CKEditor_0_4.context;
        }
        return notFoundResult;
    };
    _View_CKEditor_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.debug(0, 0, 0);
        this._CKEditor_0_4.detectChangesInInputProps(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        this._CKEditor_0_4.detectChangesInHostProps(this, this._el_0, throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            this.debug(0, 0, 0);
            if ((this.numberOfChecks === 0)) {
                this._CKEditor_0_4.context.ngAfterViewInit();
            }
        }
    };
    return _View_CKEditor_Host0;
}(import3.DebugAppView));
function viewFactory_CKEditor_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CKEditor_Host === null)) {
        (renderType_CKEditor_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_CKEditor_Host0(viewUtils, parentInjector, declarationEl);
}
exports.CKEditorNgFactory = new import10.ComponentFactory('ckeditor', viewFactory_CKEditor_Host0, import0.CKEditor);
var styles_CKEditor = [];
var nodeDebugInfos_CKEditor0 = [
    new import4.StaticNodeDebugInfo([], null, {}),
    new import4.StaticNodeDebugInfo([], null, {}),
    new import4.StaticNodeDebugInfo([], null, {}),
    new import4.StaticNodeDebugInfo([], null, {}),
    new import4.StaticNodeDebugInfo([], null, {})
];
var renderType_CKEditor = null;
var _View_CKEditor0 = (function (_super) {
    __extends(_View_CKEditor0, _super);
    function _View_CKEditor0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CKEditor0, renderType_CKEditor, import8.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways, nodeDebugInfos_CKEditor0);
        this._expr_5 = import1.UNINITIALIZED;
    }
    _View_CKEditor0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = import2.createRenderElement(this.renderer, parentRenderNode, 'div', import2.EMPTY_INLINE_ARRAY, this.debug(0, 0, 0));
        this._text_1 = this.renderer.createText(this._el_0, 'Hello world! This is some default text for the ', this.debug(1, 0, 31));
        this._el_2 = import2.createRenderElement(this.renderer, this._el_0, 'strong', import2.EMPTY_INLINE_ARRAY, this.debug(2, 0, 78));
        this._text_3 = this.renderer.createText(this._el_2, 'rich text', this.debug(3, 0, 86));
        this._text_4 = this.renderer.createText(this._el_0, ' editor, CKEditor!', this.debug(4, 0, 104));
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ], [], []);
        return null;
    };
    _View_CKEditor0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        this.debug(0, 0, 5);
        var currVal_5 = this.context.ckEditorInstanceID;
        if (import2.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_5);
            this._expr_5 = currVal_5;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_CKEditor0;
}(import3.DebugAppView));
function viewFactory_CKEditor0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CKEditor === null)) {
        (renderType_CKEditor = viewUtils.createRenderComponentType('C:/Source/GitHub/angular2-webpack2-dotnet-starter/complete/src/app-components/directives/ckeditor/ckeditor.component.ts class CKEditor - inline template', 0, import9.ViewEncapsulation.None, styles_CKEditor, {}));
    }
    return new _View_CKEditor0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_CKEditor0 = viewFactory_CKEditor0;
//# sourceMappingURL=ckeditor.component.ngfactory.js.map